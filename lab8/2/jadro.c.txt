#include <linux/module.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/device.h>
#include <linux/uaccess.h>

#define NAME "fibdev"
#define MAX_FIB_INDEX 1000 // Maksymalna liczba wyrazów ciągu Fibonacciego

static uint64_t fib_sequence[MAX_FIB_INDEX];
static size_t fib_index;

static ssize_t fib_read(struct file *f, char __user *u, size_t size, loff_t *pos)
{
    char fibnum[100];
    size_t trans_unit;
    if (*pos >= fib_index)
        return 0; // Koniec danych

    trans_unit = snprintf(fibnum, sizeof(fibnum), "%llu\n", fib_sequence[*pos]);
    if (trans_unit < 0)
        return -EIO;
    if (copy_to_user(u, (void *)fibnum, trans_unit))
        return -EIO;

    *pos += 1; // Przesunięcie wskaźnika odczytu

    return trans_unit;
}

static ssize_t fib_write(struct file *f, const char __user *u, size_t size, loff_t *pos)
{
    return 0;
}

static int fib_open(struct inode *ind, struct file *f)
{
    size_t i;
    fib_sequence[0] = 0;
    fib_sequence[1] = 1;
    for (i = 2; i < MAX_FIB_INDEX; i++) {
        fib_sequence[i] = fib_sequence[i-1] + fib_sequence[i-2];
    }
    fib_index = MAX_FIB_INDEX;
    return 0;
}

static int fib_release(struct inode *ind, struct file *f)
{
    return 0;
}

static loff_t fib_llseek(struct file *f, loff_t offset, int whence)
{
    loff_t new_pos;

    switch (whence) {
    case SEEK_SET:
        new_pos = offset;
        break;
    case SEEK_CUR:
        new_pos = f->f_pos + offset;
        break;
    case SEEK_END:
        new_pos = fib_index + offset;
        break;
    default:
        return -EINVAL;
    }
    if (new_pos < 0 || new_pos >= fib_index)
        return -EINVAL;

    f->f_pos = new_pos;
    return new_pos;
}

static struct file_operations fibop = {
    .owner = THIS_MODULE,
    .open = fib_open,
    .release = fib_release,
    .read = fib_read,
    .write = fib_write,
    .llseek = fib_llseek,
};

static dev_t number = 0;
static struct cdev fib_cdev;
static struct class *fib_class;
static struct device *fib_device;

static int __init fibchar_init(void)
{
    if (alloc_chrdev_region(&number, 0, 1, NAME) < 0) {
        printk(KERN_ALERT "[fibdev]: Region allocation error!\n");
        return -1;
    }

    fib_class = class_create(THIS_MODULE, NAME);
    if (IS_ERR(fib_class)) {
        printk(KERN_ALERT "[fibdev]: Error creating class: %ld!\n", PTR_ERR(fib_class));
        unregister_chrdev_region(number, 1);
        return -1;
    }

    cdev_init(&fib_cdev, &fibop);
    fib_cdev.owner = THIS_MODULE;

    if (cdev_add(&fib_cdev, number, 1)) {
        printk(KERN_ALERT "[fibdev]: Error adding cdev!\n");
        class_destroy(fib_class);
        unregister_chrdev_region(number, 1);
        return -1;
    }

    fib_device = device_create(fib_class, NULL, number, NULL, NAME);
    if (IS_ERR(fib_device)) {
        printk(KERN_ALERT "[fibdev]: Error creating device: %ld!\n", PTR_ERR(fib_device));
        cdev_del(&fib_cdev);
        class_destroy(fib_class);
        unregister_chrdev_region(number, 1);
        return -1;
    }

    return 0;
}

static void __exit fibchar_exit(void)
{
    if (fib_device)
        device_destroy(fib_class, number);
    cdev_del(&fib_cdev);
    if (fib_class)
        class_destroy(fib_class);
    if (number >= 0)
        unregister_chrdev_region(number, 1);
}

module_init(fibchar_init);
module_exit(fibchar_exit);
MODULE_LICENSE("GPL");
