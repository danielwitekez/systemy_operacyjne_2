#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/slab.h> // Potrzebne dla kmalloc i kfree

MODULE_LICENSE("GPL");

// Struktura elementu listy
typedef struct ListNode {
    int data;
    struct ListNode *next;
} ListNode;

// Funkcja tworząca nowy element listy
ListNode *createNode(int value) {
    ListNode *newNode = kmalloc(sizeof(ListNode), GFP_KERNEL);
    if (!newNode) {
        printk(KERN_ERR "Failed to allocate memory for new node\n");
        return NULL;
    }
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

// Funkcja dodająca element na koniec listy
void append(ListNode **head, int value) {
    ListNode *newNode = createNode(value);
    if (*head == NULL) {
        *head = newNode;
        (*head)->next = *head; // ustawienie wskaźnika next na siebie samego, tworząc cykl
    } else {
        ListNode *temp = *head;
        while (temp->next != *head) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = *head;
    }
}

// Funkcja usuwająca listę
void destroyList(ListNode **head) {
    if (*head == NULL) {
        return;
    }
    ListNode *current = *head;
    ListNode *temp;
    do {
        temp = current->next;
        kfree(current);
        current = temp;
    } while (current != *head);
    *head = NULL;
}

// Funkcja wyświetlająca zawartość listy
void displayList(ListNode *head) {
    if (head == NULL) {
        printk(KERN_INFO "List is empty\n");
        return;
    }
    ListNode *current = head;
    printk(KERN_INFO "List: ");
    do {
        printk(KERN_CONT "%d ", current->data);
        current = current->next;
    } while (current != head);
    printk(KERN_CONT "\n");
}

// Moduł init
static int __init list_init(void) {
    ListNode *myList = NULL;
    
    append(&myList, 10);
    append(&myList, 20);
    append(&myList, 30);
    
    displayList(myList);
    
    return 0;
}

// Moduł exit
static void __exit list_exit(void) {
    ListNode *myList = NULL;
    destroyList(&myList);
    printk(KERN_INFO "Exiting list module\n");
}

module_init(list_init);
module_exit(list_exit);
