#include <linux/module.h>
#include <linux/uaccess.h>
#include <linux/proc_fs.h>
#include <linux/list.h>

struct list_item {
    char data;
    struct list_head list;
};

static struct proc_dir_entry *directory_entry_pointer, *file_entry_pointer;
static char *directory_name = "procfs_test", *file_name = "procfs_file";

static LIST_HEAD(file_list);

static ssize_t procfsmod_show(struct file *file, char __user *buffer, size_t count, loff_t *offset)
{
    struct list_item *entry;
    size_t pos = 0;

    list_for_each_entry(entry, &file_list, list) {
        if (*offset > 0) {
            (*offset)--;
            continue;
        }
        if (pos >= count)
            break;
        if (put_user(entry->data, &buffer[pos]) != 0)
            return -EFAULT;
        pos++;
    }

    return pos;
}

static ssize_t procfsmod_write(struct file *file, const char __user *buffer, size_t count, loff_t *offset)
{
    struct list_item *entry, *temp;
    size_t i;

    // Clear existing list
    list_for_each_entry_safe(entry, temp, &file_list, list) {
        list_del(&entry->list);
        kfree(entry);
    }

    // Populate list with new data
    for (i = 0; i < count; i++) {
        entry = kmalloc(sizeof(struct list_item), GFP_KERNEL);
        if (!entry)
            return -ENOMEM;
        if (copy_from_user(&entry->data, &buffer[i], 1) != 0) {
            kfree(entry);
            return -EFAULT;
        }
        list_add_tail(&entry->list, &file_list);
    }

    return count;
}

static const struct file_operations procfsmod_fops = {
    .owner = THIS_MODULE,
    .read = procfsmod_show,
    .write = procfsmod_write,
};

static int __init procfsmod_init(void)
{
    directory_entry_pointer = proc_mkdir(directory_name, NULL);
    if (IS_ERR(directory_entry_pointer)) {
        pr_alert("Error creating procfs directory: %s. Error code: %ld\n",
                 directory_name, PTR_ERR(directory_entry_pointer));
        return -1;
    }
    file_entry_pointer = proc_create(file_name, 0666, directory_entry_pointer, &procfsmod_fops);
    if (IS_ERR(file_entry_pointer)) {
        pr_alert("Error creating procfs file: %s. Error code: %ld\n",
                 file_name, PTR_ERR(file_entry_pointer));
        proc_remove(directory_entry_pointer);
        return -1;
    }

    return 0;
}

static void __exit procfsmod_exit(void)
{
    struct list_item *entry, *temp;

    // Clear list
    list_for_each_entry_safe(entry, temp, &file_list, list) {
        list_del(&entry->list);
        kfree(entry);
    }

    if (file_entry_pointer)
        proc_remove(file_entry_pointer);
    if (directory_entry_pointer)
        proc_remove(directory_entry_pointer);
}

module_init(procfsmod_init);
module_exit(procfsmod_exit);

MODULE_LICENSE("GPL");
