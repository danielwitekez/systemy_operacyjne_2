#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/slab.h> // Potrzebne dla kmalloc i kfree
#include <linux/moduleparam.h> // Potrzebne dla obsługi parametrów modułu
#include <linux/kfifo.h> // Potrzebne dla funkcji kfifo_alloc i kfifo_in

MODULE_LICENSE("GPL");

#define MAX_STR_LEN 256
#define MAX_ELEMENTS 5

static char *input_strings[MAX_ELEMENTS]; // Tablica na łańcuchy znaków przekazane jako parametry modułu
static int num_strings = 0; // Liczba łańcuchów przekazanych jako parametry modułu

module_param_array(input_strings, charp, &num_strings, 0); // Parametr modułu do przekazania łańcuchów znaków

static struct kfifo fifo_queue; // Kolejka FIFO

static int __init fifo_init(void)
{
    int i, ret;
    char buffer[MAX_STR_LEN];

    if (num_strings == 0) {
        pr_alert("No strings provided as module parameters\n");
        return -EINVAL;
    }

    ret = kfifo_alloc(&fifo_queue, MAX_ELEMENTS * MAX_STR_LEN, GFP_KERNEL);
    if (ret) {
        pr_alert("Error allocating kfifo\n");
        return ret;
    }

    // Dodawanie przekazanych łańcuchów do kolejki FIFO
    for (i = 0; i < num_strings; ++i) {
        if (strlen(input_strings[i]) >= MAX_STR_LEN) {
            pr_warn("String too long: %s\n", input_strings[i]);
            continue;
        }

        if (!kfifo_in(&fifo_queue, input_strings[i], strlen(input_strings[i]) + 1)) {
            pr_warn("Failed to enqueue string: %s\n", input_strings[i]);
        }
    }

    // Wyświetlanie zawartości kolejki
    pr_info("Elements in the FIFO queue:\n");
    while (kfifo_get(&fifo_queue, buffer, MAX_STR_LEN) > 0) {
        pr_info("Value: %s\n", buffer);
    }

    return 0;
}

static void __exit fifo_exit(void)
{
    char buffer[MAX_STR_LEN];

    pr_info("Exiting fifo module\n");

    // Wyświetlanie i usuwanie pozostałych elementów z kolejki
    while (kfifo_get(&fifo_queue, buffer, MAX_STR_LEN) > 0) {
        pr_info("Value from the queue: %s\n", buffer);
    }

    kfifo_free(&fifo_queue);
}

module_init(fifo_init);
module_exit(fifo_exit);

MODULE_AUTHOR("Your Name <your_email@domain.com>");
MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("An exemplary module demonstrating the usage of a kernel FIFO queue.");
